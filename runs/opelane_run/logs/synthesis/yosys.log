
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/adder/src/verilog/adder.v
Parsing SystemVerilog input from `/openLANE_flow/designs/adder/src/verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openLANE_flow/designs/adder/src/verilog/full_adder.v
Parsing SystemVerilog input from `/openLANE_flow/designs/adder/src/verilog/full_adder.v' to AST representation.
Generating RTLIL representation for module `\full_adder'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/adder/runs/opelane_run/tmp/synthesis/hierarchy.dot'.
Dumping module adder to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \adder
Used module:     \full_adder

4.2. Analyzing design hierarchy..
Top module:  \adder
Used module:     \full_adder
Removed 0 unused modules.

5. Executing TRIBUF pass.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \adder
Used module:     \full_adder

6.1.2. Analyzing design hierarchy..
Top module:  \adder
Used module:     \full_adder
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).

6.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

6.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.3. Executing FLATTEN pass (flatten design).
Deleting now unused module full_adder.
<suppressed ~8 debug messages>

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 72 unused wires.
<suppressed ~1 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
checking module adder..
found and reported 0 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.7.9. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.9.9. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).

6.11. Executing PEEPOPT pass (run peephole optimizers).

6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder:
  created 0 $alu and 0 $macc cells.

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.15.6. Executing OPT_DFF pass (perform DFF optimizations).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.15.9. Finished OPT passes. (There is nothing left to do.)

6.16. Executing MEMORY pass.

6.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.18.3. Executing OPT_DFF pass (perform DFF optimizations).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.20.6. Executing OPT_SHARE pass.

6.20.7. Executing OPT_DFF pass (perform DFF optimizations).

6.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.20.10. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~123 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.22.3. Executing OPT_DFF pass (perform DFF optimizations).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

6.22.5. Finished fast OPT passes.

6.23. Executing ABC pass (technology mapping using ABC).

6.23.1. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 56 gates and 73 wires to a netlist network with 17 inputs and 9 outputs.

6.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        9
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:              NAND cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               XOR cells:        9
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:        9
Removing temp directory.

6.24. Executing OPT pass (performing simple optimizations).

6.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

6.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

6.24.3. Executing OPT_DFF pass (perform DFF optimizations).

6.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 87 unused wires.
<suppressed ~62 debug messages>

6.24.5. Finished fast OPT passes.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \adder

6.25.2. Analyzing design hierarchy..
Top module:  \adder
Removed 0 unused modules.

6.26. Printing statistics.

=== adder ===

   Number of wires:                 87
   Number of wire bits:            108
   Number of public wires:          40
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                      22
     $_AND_                          9
     $_NAND_                         1
     $_ORNOT_                        6
     $_OR_                           2
     $_XNOR_                         7
     $_XOR_                          9

6.27. Executing CHECK pass (checking for obvious problems).
checking module adder..
found and reported 0 problems.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 27 unused wires.
<suppressed ~27 debug messages>

10. Printing statistics.

=== adder ===

   Number of wires:                 60
   Number of wire bits:             81
   Number of public wires:          13
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                      22
     $_AND_                          9
     $_NAND_                         1
     $_ORNOT_                        6
     $_OR_                           2
     $_XNOR_                         7
     $_XOR_                          9

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /edatools/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/edatools/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_4 (noninv, pins=3, area=23.77) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_4 (noninv, pins=4, area=28.78) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_4 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_4 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_4 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_4 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

13.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\adder':

14. Printing statistics.

=== adder ===

   Number of wires:                 60
   Number of wire bits:             81
   Number of public wires:          13
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                      22
     $_AND_                          9
     $_NAND_                         1
     $_ORNOT_                        6
     $_OR_                           2
     $_XNOR_                         7
     $_XOR_                          9

15. Executing ABC pass (technology mapping using ABC).

15.1. Extracting gate netlist of module `\adder' to `/tmp/yosys-abc-GUbh62/input.blif'..
Extracted 56 gates and 73 wires to a netlist network with 17 inputs and 9 outputs.

15.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-GUbh62/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-GUbh62/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-GUbh62/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/adder/runs/opelane_run/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/adder/runs/opelane_run/tmp/trimmed.lib" has 43 cells (6 skipped: 6 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    1.83 MB. Time =     0.06 sec
ABC: + read_constr -v /openLANE_flow/designs/adder/runs/opelane_run/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/adder/runs/opelane_run/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 0 
ABC: + buffer -N 5 -S 0.0 
ABC: Node 29 has dup fanin 1.
ABC: Node 29 has dup fanin 2.
ABC: Node 29 has dup fanin 1.
ABC: Node 29 has dup fanin 2.
ABC: Node 37 has dup fanin 29.
ABC: Node 37 has dup fanin 36.
ABC: Node 37 has dup fanin 29.
ABC: Node 37 has dup fanin 36.
ABC: Node 39 has dup fanin 10.
ABC: Node 39 has dup fanin 11.
ABC: Node 39 has dup fanin 10.
ABC: Node 39 has dup fanin 11.
ABC: Node 41 has dup fanin 39.
ABC: Node 41 has dup fanin 40.
ABC: Node 41 has dup fanin 39.
ABC: Node 41 has dup fanin 40.
ABC: Node 43 has dup fanin 12.
ABC: Node 43 has dup fanin 13.
ABC: Node 43 has dup fanin 12.
ABC: Node 43 has dup fanin 13.
ABC: Node 45 has dup fanin 43.
ABC: Node 45 has dup fanin 44.
ABC: Node 45 has dup fanin 43.
ABC: Node 45 has dup fanin 44.
ABC: Node 47 has dup fanin 14.
ABC: Node 47 has dup fanin 15.
ABC: Node 47 has dup fanin 14.
ABC: Node 47 has dup fanin 15.
ABC: Node 49 has dup fanin 47.
ABC: Node 49 has dup fanin 48.
ABC: Node 49 has dup fanin 47.
ABC: Node 49 has dup fanin 48.
ABC: Node 53 has dup fanin 16.
ABC: Node 53 has dup fanin 17.
ABC: Node 53 has dup fanin 16.
ABC: Node 53 has dup fanin 17.
ABC: Node 54 has dup fanin 51.
ABC: Node 54 has dup fanin 53.
ABC: Node 54 has dup fanin 51.
ABC: Node 54 has dup fanin 53.
ABC: Node 56 has dup fanin 27.
ABC: Node 56 has dup fanin 55.
ABC: Node 56 has dup fanin 27.
ABC: Node 56 has dup fanin 55.
ABC: Node 57 has dup fanin 6.
ABC: Node 57 has dup fanin 7.
ABC: Node 57 has dup fanin 6.
ABC: Node 57 has dup fanin 7.
ABC: Node 58 has dup fanin 34.
ABC: Node 58 has dup fanin 57.
ABC: Node 58 has dup fanin 34.
ABC: Node 58 has dup fanin 57.
ABC: Node 59 has dup fanin 8.
ABC: Node 59 has dup fanin 9.
ABC: Node 59 has dup fanin 8.
ABC: Node 59 has dup fanin 9.
ABC: Node 60 has dup fanin 35.
ABC: Node 60 has dup fanin 59.
ABC: Node 60 has dup fanin 35.
ABC: Node 60 has dup fanin 59.
ABC: + upsize -D 0 
ABC: + dnsize -D 0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     34 (  5.9 %)   Cap = 12.6 ff (  0.0 %)   Area =      533.01 (100.0 %)   Delay =  1781.44 ps  ( 29.4 %)               
ABC: Path  0 --       5 : 0    3 pi                        A =   0.00  Df =  14.6   -9.9 ps  S =  28.4 ps  Cin =  0.0 ff  Cout =  12.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      31 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df = 343.6  -49.6 ps  S =  60.6 ps  Cin =  4.6 ff  Cout =  14.7 ff  Cmax = 530.1 ff  G =  306  
ABC: Path  2 --      32 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df = 544.6 -104.0 ps  S =  60.6 ps  Cin =  4.6 ff  Cout =  14.7 ff  Cmax = 530.1 ff  G =  306  
ABC: Path  3 --      33 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df = 743.6 -158.7 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path  4 --      37 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df = 942.1 -213.6 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path  5 --      41 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =1140.5 -268.5 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path  6 --      45 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =1339.0 -323.5 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path  7 --      49 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =1539.4 -378.2 ps  S =  60.6 ps  Cin =  4.6 ff  Cout =  14.7 ff  Cmax = 530.1 ff  G =  306  
ABC: Path  8 --      52 : 4    1 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df =1781.4   -1.9 ps  S =  69.8 ps  Cin =  4.6 ff  Cout =  17.6 ff  Cmax = 502.6 ff  G =  382  
ABC: Start-point = pi4 (\i1 [0]).  End-point = po5 (\fa_f:7.fa_i._1_).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   17/    9  lat =    0  nd =    34  edge =    113  area =533.05  delay = 9.00  lev = 9
ABC: + write_blif /tmp/yosys-abc-GUbh62/output.blif 

15.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_4 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_4 cells:        8
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:        9
Removing temp directory.

16. Executing SETUNDEF pass (replace undef values with defined constants).

17. Executing HILOMAP pass (mapping to constant drivers).

18. Executing SPLITNETS pass (splitting up multi-bit signals).

19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 81 unused wires.
<suppressed ~9 debug messages>

20. Executing INSBUF pass (insert buffer cells for connected wires).

21. Executing CHECK pass (checking for obvious problems).
checking module adder..
Warning: Wire adder.\s [7] is used but has no driver.
Warning: Wire adder.\s [6] is used but has no driver.
Warning: Wire adder.\s [5] is used but has no driver.
Warning: Wire adder.\s [4] is used but has no driver.
Warning: Wire adder.\s [3] is used but has no driver.
Warning: Wire adder.\s [2] is used but has no driver.
Warning: Wire adder.\s [1] is used but has no driver.
Warning: Wire adder.\s [0] is used but has no driver.
Warning: Wire adder.\co is used but has no driver.
found and reported 9 problems.

22. Printing statistics.

=== adder ===

   Number of wires:                 30
   Number of wire bits:             51
   Number of public wires:           5
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     sky130_fd_sc_hd__a2bb2o_4      15
     sky130_fd_sc_hd__and2_4         8
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__o21a_4         1
     sky130_fd_sc_hd__o22a_4         8

   Chip area for module '\adder': 533.011200

23. Executing Verilog backend.
Dumping module `\adder'.

Warnings: 9 unique messages, 9 total
End of script. Logfile hash: 765d9f731e, CPU: user 1.14s system 0.01s, MEM: 43.96 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 41% 4x stat (0 sec), 29% 2x abc (0 sec), ...
